{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuel/my-portfolio/client/src/context/theme/theme-context.tsx\",\n    _s = $RefreshSig$();\n\n/** @format */\n// /** @format */\n// import {\n// \tuseState,\n// \tcreateContext,\n// \tuseMemo,\n// \tuseEffect,\n// \tSetStateAction,\n// } from 'react';\n// type ThemeContextProps = {\n// \tvalue: 'light' | 'dark';\n// \thandleSetValue: (value: 'light' | 'dark') => void;\n// };\n// export const ThemeContext = createContext<ThemeContextProps>({\n// \tvalue: 'dark',\n// \thandleSetValue: (value: 'light' | 'dark') => undefined,\n// });\n// //Line 22-38 If the background is light/white, it should still be on page reload\n// export function ThemeContextProvider({ children }: any) {\n// \tconst [value, setValue] = useState<'light' | 'dark'>('dark');\n// \tuseEffect(() => {\n// \t\tloadItemsFromStorage();\n// \t});\n// \tconst loadItemsFromStorage = () => {\n// \t\tlet storageItem = window.localStorage.getItem(\n// \t\t\t'themeSwitch'\n// \t\t) as SetStateAction<'light' | 'dark'>;\n// \t\tif (storageItem) {\n// \t\t\tsetValue(storageItem);\n// \t\t\tdocument.body.className = storageItem as 'light' | 'dark';\n// \t\t}\n// \t};\n// \tconst memoValue = useMemo(() => {\n// \t\tconst handleSetValue = (value: 'light' | 'dark') => {\n// \t\t\tif (value === 'light') {\n// \t\t\t\tsetValue('dark');\n// \t\t\t\tlocalStorage.setItem('themeSwitch', 'dark');\n// \t\t\t} else {\n// \t\t\t\tsetValue('light');\n// \t\t\t\tlocalStorage.setItem('themeSwitch', 'light');\n// \t\t\t}\n// \t\t};\n// \t\treturn {\n// \t\t\tvalue,\n// \t\t\thandleSetValue,\n// \t\t};\n// \t}, [value]);\n// \treturn (\n// \t\t<ThemeContext.Provider value={memoValue}>{children}</ThemeContext.Provider>\n// \t);\n// }\n\n/** @format */\nimport { useState, createContext, useMemo, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext({\n  value: 'dark',\n  handleSetValue: value => undefined\n}); //Line 22-38 If the background is light/white, it should still be on page reload\n\nexport function ThemeContextProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [value, setValue] = useState('light' || 'dark');\n  useEffect(() => {\n    loadItemsFromStorage();\n  });\n\n  const loadItemsFromStorage = () => {\n    let storageItem = window.localStorage.getItem('themeSwitch');\n\n    if (storageItem) {\n      setValue(storageItem);\n      document.body.className = storageItem;\n    }\n  };\n\n  const memoValue = useMemo(() => {\n    const handleSetValue = value => {\n      if (value === 'light') {\n        setValue('dark');\n        localStorage.setItem('themeSwitch', 'dark');\n      } else {\n        setValue('light');\n        localStorage.setItem('themeSwitch', 'light');\n      }\n    };\n\n    return {\n      value,\n      handleSetValue\n    };\n  }, [value]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: memoValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ThemeContextProvider, \"I7/p2luR1kammCcsoNMslBI8S3I=\");\n\n_c = ThemeContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"names":["useState","createContext","useMemo","useEffect","ThemeContext","value","handleSetValue","undefined","ThemeContextProvider","children","setValue","loadItemsFromStorage","storageItem","window","localStorage","getItem","document","body","className","memoValue","setItem"],"sources":["/Users/emmanuel/my-portfolio/client/src/context/theme/theme-context.tsx"],"sourcesContent":["/** @format */\n\n// /** @format */\n\n// import {\n// \tuseState,\n// \tcreateContext,\n// \tuseMemo,\n// \tuseEffect,\n// \tSetStateAction,\n// } from 'react';\n\n// type ThemeContextProps = {\n// \tvalue: 'light' | 'dark';\n// \thandleSetValue: (value: 'light' | 'dark') => void;\n// };\n\n// export const ThemeContext = createContext<ThemeContextProps>({\n// \tvalue: 'dark',\n// \thandleSetValue: (value: 'light' | 'dark') => undefined,\n// });\n\n// //Line 22-38 If the background is light/white, it should still be on page reload\n// export function ThemeContextProvider({ children }: any) {\n// \tconst [value, setValue] = useState<'light' | 'dark'>('dark');\n\n// \tuseEffect(() => {\n// \t\tloadItemsFromStorage();\n// \t});\n\n// \tconst loadItemsFromStorage = () => {\n// \t\tlet storageItem = window.localStorage.getItem(\n// \t\t\t'themeSwitch'\n// \t\t) as SetStateAction<'light' | 'dark'>;\n\n// \t\tif (storageItem) {\n// \t\t\tsetValue(storageItem);\n// \t\t\tdocument.body.className = storageItem as 'light' | 'dark';\n// \t\t}\n// \t};\n// \tconst memoValue = useMemo(() => {\n// \t\tconst handleSetValue = (value: 'light' | 'dark') => {\n// \t\t\tif (value === 'light') {\n// \t\t\t\tsetValue('dark');\n// \t\t\t\tlocalStorage.setItem('themeSwitch', 'dark');\n// \t\t\t} else {\n// \t\t\t\tsetValue('light');\n// \t\t\t\tlocalStorage.setItem('themeSwitch', 'light');\n// \t\t\t}\n// \t\t};\n\n// \t\treturn {\n// \t\t\tvalue,\n// \t\t\thandleSetValue,\n// \t\t};\n// \t}, [value]);\n\n// \treturn (\n// \t\t<ThemeContext.Provider value={memoValue}>{children}</ThemeContext.Provider>\n// \t);\n// }\n/** @format */\n\nimport {\n\tuseState,\n\tcreateContext,\n\tuseMemo,\n\tuseEffect,\n\tSetStateAction,\n} from 'react';\n\ntype ThemeContextProps = {\n\tvalue: 'light' | 'dark';\n\thandleSetValue: (value: 'light' | 'dark') => void;\n};\n\nexport const ThemeContext = createContext<ThemeContextProps>({\n\tvalue: 'dark',\n\thandleSetValue: (value: 'light' | 'dark') => undefined,\n});\n\n//Line 22-38 If the background is light/white, it should still be on page reload\nexport function ThemeContextProvider({ children }: any) {\n\tconst [value, setValue] = useState('light' || 'dark');\n\n\tuseEffect(() => {\n\t\tloadItemsFromStorage();\n\t});\n\n\tconst loadItemsFromStorage = () => {\n\t\tlet storageItem = window.localStorage.getItem(\n\t\t\t'themeSwitch'\n\t\t) as SetStateAction<'light' | 'dark'>;\n\n\t\tif (storageItem) {\n\t\t\tsetValue(storageItem);\n\t\t\tdocument.body.className = storageItem as 'light' | 'dark';\n\t\t}\n\t};\n\tconst memoValue = useMemo(() => {\n\t\tconst handleSetValue = (value: 'light' | 'dark') => {\n\t\t\tif (value === 'light') {\n\t\t\t\tsetValue('dark');\n\t\t\t\tlocalStorage.setItem('themeSwitch', 'dark');\n\t\t\t} else {\n\t\t\t\tsetValue('light');\n\t\t\t\tlocalStorage.setItem('themeSwitch', 'light');\n\t\t\t}\n\t\t};\n\n\t\treturn {\n\t\t\tvalue,\n\t\t\thandleSetValue,\n\t\t};\n\t}, [value]);\n\n\treturn (\n\t\t<ThemeContext.Provider value={memoValue}>{children}</ThemeContext.Provider>\n\t);\n}\n"],"mappings":";;;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AACA;AAEA,SACCA,QADD,EAECC,aAFD,EAGCC,OAHD,EAICC,SAJD,QAMO,OANP;;AAaA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,CAAoB;EAC5DI,KAAK,EAAE,MADqD;EAE5DC,cAAc,EAAGD,KAAD,IAA6BE;AAFe,CAApB,CAAlC,C,CAKP;;AACA,OAAO,SAASC,oBAAT,OAAiD;EAAA;;EAAA,IAAnB;IAAEC;EAAF,CAAmB;EACvD,MAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBV,QAAQ,CAAC,WAAW,MAAZ,CAAlC;EAEAG,SAAS,CAAC,MAAM;IACfQ,oBAAoB;EACpB,CAFQ,CAAT;;EAIA,MAAMA,oBAAoB,GAAG,MAAM;IAClC,IAAIC,WAAW,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CACjB,aADiB,CAAlB;;IAIA,IAAIH,WAAJ,EAAiB;MAChBF,QAAQ,CAACE,WAAD,CAAR;MACAI,QAAQ,CAACC,IAAT,CAAcC,SAAd,GAA0BN,WAA1B;IACA;EACD,CATD;;EAUA,MAAMO,SAAS,GAAGjB,OAAO,CAAC,MAAM;IAC/B,MAAMI,cAAc,GAAID,KAAD,IAA6B;MACnD,IAAIA,KAAK,KAAK,OAAd,EAAuB;QACtBK,QAAQ,CAAC,MAAD,CAAR;QACAI,YAAY,CAACM,OAAb,CAAqB,aAArB,EAAoC,MAApC;MACA,CAHD,MAGO;QACNV,QAAQ,CAAC,OAAD,CAAR;QACAI,YAAY,CAACM,OAAb,CAAqB,aAArB,EAAoC,OAApC;MACA;IACD,CARD;;IAUA,OAAO;MACNf,KADM;MAENC;IAFM,CAAP;EAIA,CAfwB,EAetB,CAACD,KAAD,CAfsB,CAAzB;EAiBA,oBACC,QAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAEc,SAA9B;IAAA,UAA0CV;EAA1C;IAAA;IAAA;IAAA;EAAA,QADD;AAGA;;GArCeD,oB;;KAAAA,oB"},"metadata":{},"sourceType":"module"}